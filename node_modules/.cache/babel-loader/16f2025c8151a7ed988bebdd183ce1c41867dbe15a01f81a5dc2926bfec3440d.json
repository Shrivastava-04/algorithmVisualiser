{"ast":null,"code":"export const mergeSort = array => {\n  const trace = [];\n  console.log(array);\n  const mergeHalves = (l, m, r) => {\n    const arr1 = array.slice(l, m);\n    const arr2 = array.slice(m, r);\n    let i = 0,\n      j = 0,\n      k = l;\n    while (i < arr1.length && j < arr2.length) {\n      if (arr1[i] < arr2[j]) {\n        array[k++] = arr1[i++];\n        trace.push({\n          array: [...array],\n          active: [k],\n          lcurr: l,\n          rcurr: r\n        });\n      } else {\n        array[k++] = arr2[j++];\n        trace.push({\n          array: [...array],\n          active: [k],\n          lcurr: l,\n          rcurr: r\n        });\n      }\n    }\n    while (i < arr1.length) {\n      array[k++] = arr1[i++];\n      trace.push({\n        array: [...array],\n        active: [k],\n        lcurr: l,\n        rcurr: r\n      });\n    }\n    while (j < arr2.length) {\n      array[k++] = arr2[j++];\n      trace.push({\n        array: [...array],\n        active: [k],\n        lcurr: l,\n        rcurr: r\n      });\n    }\n  };\n  const runMerge = (array, l, r) => {\n    if (r === l) return array;\n    let m = Math.floor((l + r) / 2);\n    if (r - l > 1) {\n      runMerge(array, l, m);\n      runMerge(array, m, r);\n    }\n    mergeHalves(l, m, r);\n    console.log(l + \" \" + r);\n  };\n  runMerge(array, 0, array.length);\n  for (let i = 0; i < array.length; i++) {\n    trace.push({\n      array: [...array],\n      active: [i],\n      lcurr: -1,\n      rcurr: -1\n    });\n  }\n  trace.push({\n    array: [...array],\n    active: [],\n    lcurr: -1,\n    rcurr: -1\n  });\n  console.log(trace);\n  return trace;\n};","map":{"version":3,"names":["mergeSort","array","trace","console","log","mergeHalves","l","m","r","arr1","slice","arr2","i","j","k","length","push","active","lcurr","rcurr","runMerge","Math","floor"],"sources":["C:/Users/hrshi/Desktop/Projects/algoVisualiser/Algorithm-Visualizer/src/algorithms/MergeSort.js"],"sourcesContent":["export const mergeSort = (array) => {\r\n  const trace = [];\r\n\r\n  console.log(array);\r\n\r\n  const mergeHalves = (l, m, r) => {\r\n    const arr1 = array.slice(l, m);\r\n    const arr2 = array.slice(m, r);\r\n\r\n    let i = 0,\r\n      j = 0,\r\n      k = l;\r\n\r\n    while (i < arr1.length && j < arr2.length) {\r\n      if (arr1[i] < arr2[j]) {\r\n        array[k++] = arr1[i++];\r\n        trace.push({ array: [...array], active: [k], lcurr: l, rcurr: r });\r\n      } else {\r\n        array[k++] = arr2[j++];\r\n        trace.push({ array: [...array], active: [k], lcurr: l, rcurr: r });\r\n      }\r\n    }\r\n    while (i < arr1.length) {\r\n      array[k++] = arr1[i++];\r\n      trace.push({ array: [...array], active: [k], lcurr: l, rcurr: r });\r\n    }\r\n    while (j < arr2.length) {\r\n      array[k++] = arr2[j++];\r\n      trace.push({ array: [...array], active: [k], lcurr: l, rcurr: r });\r\n    }\r\n  };\r\n\r\n  const runMerge = (array, l, r) => {\r\n    if (r === l) return array;\r\n    let m = Math.floor((l + r) / 2);\r\n    if (r - l > 1) {\r\n      runMerge(array, l, m);\r\n      runMerge(array, m, r);\r\n    }\r\n    mergeHalves(l, m, r);\r\n    console.log(l + \" \" + r);\r\n  };\r\n\r\n  runMerge(array, 0, array.length);\r\n\r\n  for (let i = 0; i < array.length; i++) {\r\n    trace.push({ array: [...array], active: [i], lcurr: -1, rcurr: -1 });\r\n  }\r\n  trace.push({ array: [...array], active: [], lcurr: -1, rcurr: -1 });\r\n\r\n  console.log(trace);\r\n  return trace;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}