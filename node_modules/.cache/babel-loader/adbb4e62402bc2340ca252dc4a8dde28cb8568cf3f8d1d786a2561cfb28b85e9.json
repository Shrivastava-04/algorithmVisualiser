{"ast":null,"code":"export const quickSort = array => {\n  const trace = [];\n  console.log(array);\n  const mergeHalves = (l, val, r) => {\n    const arr1 = [];\n    const arr2 = [];\n    for (let i = l; i < r; i++) {\n      if (array[i] < val) arr1.push(array[i]);\n      if (array[i] > val) arr2.push(array[i]);\n    }\n\n    // for (let i = 0; i < arr1.length; i++) {\n    //   trace.push({ array: [...array], active: [i], lcurr: l, rcurr: r });\n    // }\n    array[l + arr1.length] = val;\n    for (let i = 0; i < Math.max(arr1.length, arr2.length); i++) {\n      if (i < arr1.length) {\n        array[l + i] = arr1[i];\n        trace.push({\n          array: [...array],\n          active: [l + i],\n          // lcurr: [l + arr1.length],\n          // rcurr: [l + arr1.length] + 1,\n          lcurr: -1,\n          rcurr: -1\n        });\n      }\n      if (i < arr2.length) {\n        array[l + arr1.length + arr2.length - i] = arr2[arr2.length - 1 - i];\n        trace.push({\n          array: [...array],\n          active: [l + arr1.length + arr2.length - i],\n          // lcurr: [l + arr1.length],\n          // rcurr: [l + arr1.length] + 1,\n          lcurr: -1,\n          rcurr: -1\n        });\n      }\n    }\n    return l + arr1.length;\n  };\n  const runQuick = (array, l, r) => {\n    if (r === l) return array;\n    let temp = [];\n    for (let i = l; i < r; i++) {\n      temp.push(array[i]);\n    }\n    temp.sort(function (a, b) {\n      return a - b;\n    });\n    let val = temp[Math.floor(temp.length / 2)];\n    let pivot = mergeHalves(l, val, r);\n    if (r - l > 1) {\n      runQuick(array, l, pivot);\n      runQuick(array, pivot + 1, r);\n    }\n  };\n  runQuick(array, 0, array.length);\n  for (let i = 0; i < array.length; i++) {\n    trace.push({\n      array: [...array],\n      active: [i],\n      lcurr: -1,\n      rcurr: -1\n    });\n  }\n  trace.push({\n    array: [...array],\n    active: [],\n    lcurr: -1,\n    rcurr: -1\n  });\n  console.log(trace);\n  return trace;\n};","map":{"version":3,"names":["quickSort","array","trace","console","log","mergeHalves","l","val","r","arr1","arr2","i","push","length","Math","max","active","lcurr","rcurr","runQuick","temp","sort","a","b","floor","pivot"],"sources":["C:/Users/hrshi/Desktop/Projects/algoVisualiser/Algorithm-Visualizer/src/algorithms/QuickSort.js"],"sourcesContent":["export const quickSort = (array) => {\r\n  const trace = [];\r\n\r\n  console.log(array);\r\n\r\n  const mergeHalves = (l, val, r) => {\r\n    const arr1 = [];\r\n    const arr2 = [];\r\n\r\n    for (let i = l; i < r; i++) {\r\n      if (array[i] < val) arr1.push(array[i]);\r\n      if (array[i] > val) arr2.push(array[i]);\r\n    }\r\n\r\n    // for (let i = 0; i < arr1.length; i++) {\r\n    //   trace.push({ array: [...array], active: [i], lcurr: l, rcurr: r });\r\n    // }\r\n    array[l + arr1.length] = val;\r\n    for (let i = 0; i < Math.max(arr1.length, arr2.length); i++) {\r\n      if (i < arr1.length) {\r\n        array[l + i] = arr1[i];\r\n        trace.push({\r\n          array: [...array],\r\n          active: [l + i],\r\n          // lcurr: [l + arr1.length],\r\n          // rcurr: [l + arr1.length] + 1,\r\n          lcurr: -1,\r\n          rcurr: -1,\r\n        });\r\n      }\r\n      if (i < arr2.length) {\r\n        array[l + arr1.length + arr2.length - i] = arr2[arr2.length - 1 - i];\r\n        trace.push({\r\n          array: [...array],\r\n          active: [l + arr1.length + arr2.length - i],\r\n          // lcurr: [l + arr1.length],\r\n          // rcurr: [l + arr1.length] + 1,\r\n          lcurr: -1,\r\n          rcurr: -1,\r\n        });\r\n      }\r\n    }\r\n    return l + arr1.length;\r\n  };\r\n\r\n  const runQuick = (array, l, r) => {\r\n    if (r === l) return array;\r\n    let temp = [];\r\n    for (let i = l; i < r; i++) {\r\n      temp.push(array[i]);\r\n    }\r\n    temp.sort(function (a, b) {\r\n      return a - b;\r\n    });\r\n    let val = temp[Math.floor(temp.length / 2)];\r\n    let pivot = mergeHalves(l, val, r);\r\n\r\n    if (r - l > 1) {\r\n      runQuick(array, l, pivot);\r\n      runQuick(array, pivot + 1, r);\r\n    }\r\n  };\r\n\r\n  runQuick(array, 0, array.length);\r\n\r\n  for (let i = 0; i < array.length; i++) {\r\n    trace.push({ array: [...array], active: [i], lcurr: -1, rcurr: -1 });\r\n  }\r\n  trace.push({ array: [...array], active: [], lcurr: -1, rcurr: -1 });\r\n\r\n  console.log(trace);\r\n  return trace;\r\n};\r\n"],"mappings":"AAAA,OAAO,MAAMA,SAAS,GAAIC,KAAK,IAAK;EAClC,MAAMC,KAAK,GAAG,EAAE;EAEhBC,OAAO,CAACC,GAAG,CAACH,KAAK,CAAC;EAElB,MAAMI,WAAW,GAAGA,CAACC,CAAC,EAAEC,GAAG,EAAEC,CAAC,KAAK;IACjC,MAAMC,IAAI,GAAG,EAAE;IACf,MAAMC,IAAI,GAAG,EAAE;IAEf,KAAK,IAAIC,CAAC,GAAGL,CAAC,EAAEK,CAAC,GAAGH,CAAC,EAAEG,CAAC,EAAE,EAAE;MAC1B,IAAIV,KAAK,CAACU,CAAC,CAAC,GAAGJ,GAAG,EAAEE,IAAI,CAACG,IAAI,CAACX,KAAK,CAACU,CAAC,CAAC,CAAC;MACvC,IAAIV,KAAK,CAACU,CAAC,CAAC,GAAGJ,GAAG,EAAEG,IAAI,CAACE,IAAI,CAACX,KAAK,CAACU,CAAC,CAAC,CAAC;IACzC;;IAEA;IACA;IACA;IACAV,KAAK,CAACK,CAAC,GAAGG,IAAI,CAACI,MAAM,CAAC,GAAGN,GAAG;IAC5B,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGG,IAAI,CAACC,GAAG,CAACN,IAAI,CAACI,MAAM,EAAEH,IAAI,CAACG,MAAM,CAAC,EAAEF,CAAC,EAAE,EAAE;MAC3D,IAAIA,CAAC,GAAGF,IAAI,CAACI,MAAM,EAAE;QACnBZ,KAAK,CAACK,CAAC,GAAGK,CAAC,CAAC,GAAGF,IAAI,CAACE,CAAC,CAAC;QACtBT,KAAK,CAACU,IAAI,CAAC;UACTX,KAAK,EAAE,CAAC,GAAGA,KAAK,CAAC;UACjBe,MAAM,EAAE,CAACV,CAAC,GAAGK,CAAC,CAAC;UACf;UACA;UACAM,KAAK,EAAE,CAAC,CAAC;UACTC,KAAK,EAAE,CAAC;QACV,CAAC,CAAC;MACJ;MACA,IAAIP,CAAC,GAAGD,IAAI,CAACG,MAAM,EAAE;QACnBZ,KAAK,CAACK,CAAC,GAAGG,IAAI,CAACI,MAAM,GAAGH,IAAI,CAACG,MAAM,GAAGF,CAAC,CAAC,GAAGD,IAAI,CAACA,IAAI,CAACG,MAAM,GAAG,CAAC,GAAGF,CAAC,CAAC;QACpET,KAAK,CAACU,IAAI,CAAC;UACTX,KAAK,EAAE,CAAC,GAAGA,KAAK,CAAC;UACjBe,MAAM,EAAE,CAACV,CAAC,GAAGG,IAAI,CAACI,MAAM,GAAGH,IAAI,CAACG,MAAM,GAAGF,CAAC,CAAC;UAC3C;UACA;UACAM,KAAK,EAAE,CAAC,CAAC;UACTC,KAAK,EAAE,CAAC;QACV,CAAC,CAAC;MACJ;IACF;IACA,OAAOZ,CAAC,GAAGG,IAAI,CAACI,MAAM;EACxB,CAAC;EAED,MAAMM,QAAQ,GAAGA,CAAClB,KAAK,EAAEK,CAAC,EAAEE,CAAC,KAAK;IAChC,IAAIA,CAAC,KAAKF,CAAC,EAAE,OAAOL,KAAK;IACzB,IAAImB,IAAI,GAAG,EAAE;IACb,KAAK,IAAIT,CAAC,GAAGL,CAAC,EAAEK,CAAC,GAAGH,CAAC,EAAEG,CAAC,EAAE,EAAE;MAC1BS,IAAI,CAACR,IAAI,CAACX,KAAK,CAACU,CAAC,CAAC,CAAC;IACrB;IACAS,IAAI,CAACC,IAAI,CAAC,UAAUC,CAAC,EAAEC,CAAC,EAAE;MACxB,OAAOD,CAAC,GAAGC,CAAC;IACd,CAAC,CAAC;IACF,IAAIhB,GAAG,GAAGa,IAAI,CAACN,IAAI,CAACU,KAAK,CAACJ,IAAI,CAACP,MAAM,GAAG,CAAC,CAAC,CAAC;IAC3C,IAAIY,KAAK,GAAGpB,WAAW,CAACC,CAAC,EAAEC,GAAG,EAAEC,CAAC,CAAC;IAElC,IAAIA,CAAC,GAAGF,CAAC,GAAG,CAAC,EAAE;MACba,QAAQ,CAAClB,KAAK,EAAEK,CAAC,EAAEmB,KAAK,CAAC;MACzBN,QAAQ,CAAClB,KAAK,EAAEwB,KAAK,GAAG,CAAC,EAAEjB,CAAC,CAAC;IAC/B;EACF,CAAC;EAEDW,QAAQ,CAAClB,KAAK,EAAE,CAAC,EAAEA,KAAK,CAACY,MAAM,CAAC;EAEhC,KAAK,IAAIF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGV,KAAK,CAACY,MAAM,EAAEF,CAAC,EAAE,EAAE;IACrCT,KAAK,CAACU,IAAI,CAAC;MAAEX,KAAK,EAAE,CAAC,GAAGA,KAAK,CAAC;MAAEe,MAAM,EAAE,CAACL,CAAC,CAAC;MAAEM,KAAK,EAAE,CAAC,CAAC;MAAEC,KAAK,EAAE,CAAC;IAAE,CAAC,CAAC;EACtE;EACAhB,KAAK,CAACU,IAAI,CAAC;IAAEX,KAAK,EAAE,CAAC,GAAGA,KAAK,CAAC;IAAEe,MAAM,EAAE,EAAE;IAAEC,KAAK,EAAE,CAAC,CAAC;IAAEC,KAAK,EAAE,CAAC;EAAE,CAAC,CAAC;EAEnEf,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EAClB,OAAOA,KAAK;AACd,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}